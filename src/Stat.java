/**
 * Created by haonantian on 12/2/16.
 */
public class Stat { // Stat class used to record and display valuable information
    private static int maxQueue;
    private static int totalPassengers;
    private static int capacityBus;
    private static int totalBus;
    private static int MPG;
    private static double maxWaiting;
    private static double maxTravel;
    private static double totalTravelTime;
    private static int totalTraveledPassengers;
    private static int peopleOnBus;
    private static double lastUpdateTime;
    private static double lastUpdateTimeForBus;
    private static int peopleInStops;
    private static double totalInStop;
    private static double totalOnBus;
    private static double averageBusPeople;
    private static double averageTravel;
    private static double averageWaiting;
    private static double PMPG;

    public static int getPeopleOnBus(){
        return peopleOnBus;
    }
    public static double getTotalOnBus(){
        return totalOnBus;
    }
    public static double getLastUpdateTimeForBus(){
        return lastUpdateTimeForBus;
    }
    public static void setLastUpdateTimeForBus(double time){
        lastUpdateTimeForBus = time;
    }
    public static void setLastUpdateTime(double time){
        lastUpdateTime = time;
    }
    public static double getLastUpdateTime(){
        return lastUpdateTime;
    }
    public static void setCapacityBus(){
        capacityBus = Bus.getCapacity();
    }
    public static void setMPG(){
        if (capacityBus == 40){
            MPG = 6;
        } else {
            MPG = 4;
        }
    }
    public static void setTotalBus(int total){
        totalBus = total;
    }
    public static void setPMPG(){
        PMPG = MPG*averageBusPeople;
    }
    // For stats generated at stops;
    public static void updateMaxQueue(){
        for (int i = 0; i < 20; i++){
            if (Stop.passengerQueue[i].getNumberOfEntries()>maxQueue){
                maxQueue = Stop.passengerQueue[i].getNumberOfEntries();
            }
        }
    }
    public static void updateMaxWaiting(Passenger[] willBeAddedPassengers){
        int size = willBeAddedPassengers.length;
        for (int i = 0; i < size; i++){
            double waitingTime = BusSim.agenda.getCurrentTime() - willBeAddedPassengers[i].getArrivalTime();
            if (waitingTime > maxWaiting){
                maxWaiting = waitingTime;
            }
        }
    }
    public static void updatePeopleInStop(){
        int result = 0;
        for (int i = 0; i < 20 ; i++){
            if (!Stop.passengerQueue[i].isEmpty()){
                result = result+Stop.passengerQueue[i].getNumberOfEntries();
            }
        }
        peopleInStops = result;
    }
    public static void updateTotalWaitingLength(){
        totalInStop = totalInStop + peopleInStops * (BusSim.agenda.getCurrentTime()-getLastUpdateTime());
    }
    public static void averageWaitingInStop(){
        averageWaiting = (totalInStop/BusSim.agenda.getCurrentTime())/18;
    }

    // For stats generated on buses;
    public static void updatePeopleOnBus(int change){
        peopleOnBus = peopleOnBus + change;
    }
    public static void updateTotalOnBus(){
        totalOnBus = totalOnBus + peopleOnBus * (BusSim.agenda.getCurrentTime()-getLastUpdateTimeForBus());
    }
    public static void setAverageBusPeople(){
        averageBusPeople = (totalOnBus/totalBus)/BusSim.agenda.getCurrentTime();
    }

    // For stats generated by passengers;
    public static void updateTotalPassengers(int newEntered){
        totalPassengers = totalPassengers + newEntered;
    }
    public static void updateMaxTravelTime(Passenger[] dropOffPassengers){
        int size = dropOffPassengers.length;
        for (int i = 0; i < size; i++){
            if (BusSim.agenda.getCurrentTime()-dropOffPassengers[i].getArrivalTime() > maxTravel){
                maxTravel = BusSim.agenda.getCurrentTime() - dropOffPassengers[i].getArrivalTime();
            }
        }
    }
    public static void updateTotalTraveledPassengers(int newFinished){
        totalTraveledPassengers = totalTraveledPassengers + newFinished;
    }
    public static void updateTotalTravelTime(Passenger[] dropOffPassengers){
        int size = dropOffPassengers.length;
        for (int i = 0; i < size; i++){
            totalTravelTime = totalTravelTime + (BusSim.agenda.getCurrentTime()-dropOffPassengers[i].getArrivalTime());
        }
    }
    public static void setAverageTravel(){
        averageTravel = totalTravelTime/totalTraveledPassengers;
    }
    public static void display(){
        System.out.println("The system is simulated for "+BusSim.agenda.getCurrentTime()+" seconds.");
        System.out.println("The variables set in this system are listed as following.");
        System.out.println("Default load: "+PassengerEvent.getInterval());
        System.out.println("Capacity of the bus: "+ Bus.getCapacity()+" and therefore, the miles per gallon will be: "+MPG);
        System.out.println("Total number of buses: "+totalBus);
        System.out.println("There are totally "+totalPassengers+" passengers involved in this system.");
        System.out.println("There are totally "+ totalTraveledPassengers + " people arrived their destinations.");
        System.out.println("The average travel time for them is: "+ averageTravel+" seconds");
        System.out.println("The maximum travel time is: "+ maxTravel);
        System.out.println("On average, there are approximately "+averageWaiting+" people waiting at a stop.");
        System.out.println("The maximum waiting queue in stop is: "+maxQueue+" people long.");
        System.out.println("The maximum waiting time is: "+maxWaiting);
        System.out.println("On average, there are "+averageBusPeople + " people on a bus.");
        System.out.println("The passenger miles per gallon in this case is: "+PMPG);
    }
}
